---
title: "Counting"
format: html
bibliography: references.bib
---

# Alignment and Mapping Algorithms

Alignment and mapping algorithms are crucial in bioinformatics for sequence alignment and genome assembly. Here are some of the most commonly used algorithms:

## 1. Smith-Waterman Algorithm

The **Smith-Waterman algorithm**[@smith1981] is a classic dynamic programming algorithm used for local sequence alignment. It identifies similar regions between two strings or nucleotide or protein sequences.

## 2. Needleman-Wunsch Algorithm

The **Needleman-Wunsch algorithm**[@needleman1970] is also a dynamic programming algorithm, but it's used for global sequence alignment. It finds the best alignment (including gaps) between two sequences.

## 3. Burrows-Wheeler Transform (BWT)

The **Burrows-Wheeler Transform (BWT)**[@burrows1994] is an algorithm that is used in data compression, notably in bzip2 and the sequence aligner Bowtie. It transforms a string into a more compressible format, which is useful for both data compression and bioinformatics.

## 4. BLAST (Basic Local Alignment Search Tool)

**BLAST**[@altschul1990] is an algorithm for comparing primary biological sequence information, such as the amino-acid sequences of proteins or the nucleotides of DNA and/or RNA sequences. It's a very fast sequence alignment algorithm primarily used to search sequence databases for optimal local alignments to a query.

# Microarray and RNA Sequencing

Microarrays and RNA sequencing are two main technologies used for gene expression profiling. They have different methodologies and applications, especially in gene differential analysis.

## Microarray

Microarrays are a well-established technology that allows for the measurement of expression levels of thousands of genes simultaneously [@schena1995]. They use probes that hybridize to specific target sequences present in the sample. The intensity of the signal from each spot on the array corresponds to the quantity of the target sequence in the sample.

## RNA Sequencing

RNA sequencing (RNA-Seq) is a more recent technology that provides a far more precise measurement of levels of transcripts and their isoforms [@wang2009]. Unlike microarrays, RNA-Seq does not require prior knowledge of the sequences and can therefore be used to discover novel transcripts.

## Differences

The main differences between microarrays and RNA-Seq include:

1. **Resolution**: RNA-Seq has a higher resolution than microarrays. It can detect low abundance transcripts, alternative splicing, and mutations [@wang2009].
2. **Dynamic Range**: RNA-Seq has a larger dynamic range than microarrays, allowing for the detection of more differentially expressed genes with higher fold change [@marioni2008].
3. **Cost**: Microarrays are generally less expensive than RNA-Seq.

## Application on Gene Differential Analysis

Both microarrays and RNA-Seq can be used for gene differential analysis, which involves finding differences in gene expression between different groups of samples. RNA-Seq is often preferred for this application due to its higher resolution and larger dynamic range [@marioni2008].

# Basic Statistical Skills for Differential Expression Analysis

Differential expression analysis involves comparing the expression levels of genes across different conditions. This process requires a understanding of various statistical concepts and methods. Here are some of the key statistical skills needed:

## 1. Hypothesis Testing

Hypothesis testing is a statistical method used to make inferences or draw conclusions about a population based on a sample of data. In the context of differential expression analysis, hypothesis testing is used to determine whether the difference in gene expression between two conditions is statistically significant [@lehmann2006].

## 2. Multiple Testing Correction

When performing multiple hypothesis tests, the chance of obtaining false positives increases. Multiple testing correction techniques, such as the Bonferroni correction or the Benjamini-Hochberg procedure, are used to control the false positive rate [@benjamini1995].

## 3. Regression Analysis

Regression analysis is used to model the relationship between a dependent variable (gene expression level) and one or more independent variables (experimental conditions). Linear regression and logistic regression are commonly used methods in differential expression analysis [@draper2014].

## 4. Bayesian Statistics

Bayesian statistics is a statistical paradigm that deals with the updating of probabilities based on observed data. Bayesian methods, such as Bayesian hierarchical models, are increasingly being used in differential expression analysis to share information across genes [@kruschke2015].

# Counting

This material has been developed utilizing the following sources: [QLedgeRPreprint](http://www.statsci.org/smyth/pubs/QLedgeRPreprint.pdf) [@Lun2016] and [RNAseqCaseStudy](http://bioinf.wehi.edu.au/RNAseqCaseStudy/).

The package we'll be using is **Rsubread**. This is a software package for the R programming language that provides a number of utilities for analyzing RNA-Seq data, including read alignment (mapping), read counting, and differential expression analysis.

The data files needed for this exercise include: - Mouse chromosome 1 Rsubread index files (approximately 400MB in size) - A file named `Targets2.txt` - The 12 `fastq.gz` files for the mouse dataset

The GEO entry for the dataset can be found [here](http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE60450).

The raw reads were downloaded from SRA from the link given in GEO for the dataset. These files are in .sra format. The sra toolkit from NCBI was used to convert the .sra files to .fastq files using the `fastq-dump` command.

## Downloading Genome Files

We have provided the index files for chromosome 1 for the mouse genome build mm10 for this lecture in order to save time on building the index. However, full genome fasta files for a number of different genomes are available to download from the UCSC genome browser, see [here](http://hgdownload.soe.ucsc.edu/downloads.html); from NCBI: [here](http://www.ncbi.nlm.nih.gov/genome); or from ENSEMBL: [here](http://asia.ensembl.org/info/data/ftp/index.html).

## Introduction and Data Import

For the purpose of this lecture, we are going to be working with a small part of the mouse reference genome (chromosome 1) to show how to do read alignment and counting using R. Mapping reads to the genome is a very important step, and many different mappers/aligners are available, such as bowtie [@Langmead2012], topHat [@trapnell2009tophat], STAR [@Dobin2013] and Rsubread [@liao2013subread]. Rsubread is the only mappers/aligner that can run in R. Most alignment tools are run in a linux environment, and they are very computationally intensive. Most mapping tasks require larger computers than an average laptop, so usually read mapping is done on a server in a linux-like environment. Here we are only going to be mapping 1000 reads from each sample from our mouse lactation dataset [@Fu2015], and we will only be mapping to chromosome 1.

First, let's load the Rsubread package into R.

```{r}
# Load necessary library
# To install package, enter in console"
# if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
# BiocManager::install("Biostrings")
library(Rsubread)
```

Earlier we put all the sequencing read data (.fastq.gz files) in the data directory. Now we need to find them in order to tell the Rsubread aligner which files to look at. We can search for all .fastq.gz files in the data directory using the `list.files` command. The pattern argument takes a regular expression. In this case we are using the `$` to mean the end of the string, so we will only get files that end in ".fastq.gz"

```{r eval=FALSE}
fastq.files <- list.files(path = "./data", pattern = ".fastq.gz$", full.names = TRUE)
fastq.files
```

## Alignment with R

### Build the Index

Read sequences are stored in compressed (gzipped) FASTQ files. Before the differential expression analysis can proceed, these reads must be aligned to the mouse genome and counted into annotated genes. This can be achieved with functions in the Rsubread package.

The first step in performing the alignment is to build an index. In order to build an index you need to have the fasta file (.fa), which can be downloaded from the UCSC genome browser. Here we are building the index just for chromosome 1. This may take several minutes to run. Building the full index using the whole mouse genome usually takes about 30 minutes to an hr on a server. *We won't be building the index in the lecture due to time constraints, we have provided the index files for you*. The command below assumes the chr1 genome information for mm10 is stored in the "chr1.fa" file.

```{r,eval=FALSE}
# We have provided the index files. You do not need to run command below.
# buildindex(basename="data/chr1_mm10", reference="chr1.fa")
```

The above command will generate the index files in the working directory. In this example, the prefix for the index files is chr1_mm10. You can see the additional files generated using the `list.files` command, which will list every file in your current working directory.

```{r, results="hide"}
list.files("data/")
```

### Aligning Reads to Chromosome 1 of Reference Genome

Now that we have generated our index, we can align our reads using the `align` command. There are often numerous mapping parameters that we can specify, but usually the default mapping parameters for the `align` function are fine. If we had paired end data, we would specify the second read file/s using the `readfile2` argument. Our mouse data comprises 100bp single end reads.

We can specify the output files, or we can let `Rsubread` choose the output file names for us. The default output file name is the filename with ".subread.BAM" added at the end.

Now we can align our 12 fastq.gz files using the `align` command.

```{r, eval=FALSE}
align(index="data/chr1_mm10", readfile1 = fastq.files)
```

This will align each of the 12 samples one after the other. As we're only using a subset of 1000 reads per sample, aligning should just take a minute or so for each sample. To run the full samples from this dataset would take several hours per sample. The BAM files are saved in the working directory.

To see how many parameters you can change try the `args` function:

```{r, eval=FALSE}
args(align)
```

In this example we have kept many of the default settings, which have been optimised to work well under a variety of situations. The default setting for `align` is that it only keeps reads that uniquely map to the reference genome. For testing differential expression of genes, this is what we want, as the reads are unambigously assigned to one place in the genome, allowing for easier interpretation of the results. Understanding all the different parameters you can change involves doing a lot of reading about the aligner that you are using, and can take a lot of time to understand! Today we won't be going into the details of the parameters you can change, but you can get more information from looking at the help:

```{r, eval=FALSE}
?align
```

We can get a summary of the proportion of reads that mapped to the reference genome using the `propmapped` function.

```{r, eval=FALSE}
bam.files <- list.files(path = "./data", pattern = ".BAM$", full.names = TRUE)
bam.files
```

```{r, eval=FALSE}
props <- propmapped(files=bam.files)
props
```

### Exercise 1

#### Objetive

The objective of this exercise is to explore the impact of alignment parameters on the mapping of sequencing reads. Specifically, we aim to:

1. **Investigate the effect of allowing multi-mapping reads**: By setting `unique = FALSE`, we allow reads that map to multiple locations in the genome. This can be particularly useful for understanding the behavior of repetitive sequences or regions of high sequence similarity.

2. **Examine the influence of reporting multiple "best" locations**: By setting `nBestLocations = 6`, we allow up to six of the best matching locations for each read to be reported. This can provide a more comprehensive view of potential mapping locations for each read.

1.  Try aligning the fastq files allowing multi-mapping reads (set `unique = FALSE`), and allowing for up to 6 "best" locations to be reported (`nBestLocations = 6`). Specify the output file names (bam.files.multi) by substituting ".fastq.gz" with ".multi.bam" so we don't overwrite our unique alignment bam files.
2.  Look at the proportion of reads mapped and see if we get any more reads mapping by specifying a less stringent criteria.

## Quality Control

Quality control (QC) is a critical step in the RNA sequencing workflow. It involves assessing the quality of the raw sequencing data, which are typically stored in FASTQ files. Each FASTQ file contains a list of reads along with their corresponding quality scores. These scores indicate the confidence of each base call. Low-quality reads, adapter sequences, and contaminants can be identified at this stage and filtered out before downstream analysis. It's important to note that QC should be an iterative process, performed before and after each major step in the RNA-Seq data analysis pipeline.

We can have a look at the quality scores associated with each base that has been called by the sequencing machine using the `qualityScores` function in *Rsubread*.

Let's first extract quality scores for 100 reads for the file "SRR1552450.fastq.gz".

```{r, eval=FALSE}
# Extract quality scores
qs <- qualityScores(filename="data/SRR1552450.fastq.gz",nreads=100)
# Check dimension of qs
dim(qs)
# Check first few elements of qs with head
head(qs)
```

A quality score of 30 corresponds to a 1 in 1000 chance of an incorrect base call. (A quality score of 10 is a 1 in 10 chance of an incorrect base call.) To look at the overall distribution of quality scores across the 100 reads, we can look at a boxplot

```{r, eval=FALSE}
boxplot(qs)
```

### Exercise

1.  Extract quality scores for SRR1552451.fastq.gz for 50 reads.
2.  Plot a boxplot of the quality scores for SRR1552451.fastq.gz."

## Counting

Once we have determined where each read originates in the genome, we need to summarize this information across genes or exons. The alignment process generates a set of BAM files, with each file containing the read alignments for each library. In the BAM file, there is a chromosomal location for every read that mapped uniquely. The mapped reads can be counted across mouse genes using the `featureCounts` function. `featureCounts` contains built-in annotation for mouse (mm9, mm10) and human (hg19) genome assemblies (NCBI refseq annotation) [@Liao2014].

The code below uses the exon intervals defined in the NCBI refseq annotation of the mm10 genome. Reads that map to exons of genes are added together to obtain the count for each gene, with some care taken with reads that span exon-exon boundaries. `featureCounts` takes all the BAM files as input, and outputs an object which includes the count matrix. Each sample is a separate column, each row is a gene.

```{r, eval=FALSE}
fc <- featureCounts(bam.files, annot.inbuilt="mm10")
```

The `names()` function in R is a built-in function that gets or sets the names of an object. In R, many types of objects can have names, including vectors, lists, data frames, and more.

```{r, eval=FALSE}
names(fc)
```

The statistics of the read mapping can be seen with `fc$stats`. This reports the numbers of unassigned reads and the reasons why they are not assigned (eg. ambiguity, multi-mapping, secondary alignment, mapping quality, fragment length, chimera, read duplicate, non-junction and so on), in addition to the number of successfully assigned reads for each library. See [subread documentation](http://bioinf.wehi.edu.au/subread-package/SubreadUsersGuide.pdf) ('Program output' section). (We know the real reason why the majority of the reads aren't mapping - they're not from chr 1!)

```{r, eval=FALSE}
## Take a look at the feature counts stats
fc$stat
```

The counts for the samples are stored in `fc$counts`. 

```{r, eval=FALSE}
## Take a look at the dimensions to see the number of genes
dim(fc$counts)
## Take a look at the first lines
head(fc$counts)
```

The row names of the `fc$counts` matrix represent the Entrez gene identifiers[@maglott2007] for each gene and the column names are the output filenames from calling the `align` function. The `annotation` slot shows the annotation information that `featureCounts` used to summarise reads over genes.

```{r, eval=FALSE}
head(fc$annotation)
```

#### Exercise

1.  Redo the counting over the exons, rather than the genes (specify `useMetaFeatures = FALSE`). Use the bam files generated doing alignment reporting only unique reads, and call the `featureCounts` object `fc.exon`. Check the dimension of the counts slot to see how much larger it is.
2.  Using your ".multi.bam" files, redo the counting over genes, allowing for multimapping reads (specify `countMultiMappingReads = TRUE`), calling the object `fc.multi`. Check the stats.
